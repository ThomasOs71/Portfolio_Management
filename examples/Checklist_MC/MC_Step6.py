# -*- coding: utf-8 -*-
"""
Created on Sun Dec  8 13:14:10 2024

@author: Thomas


s_checklist_montecarlo_step06
This case study performs Step 6 of the "Checklist", namely Ex-ante evaluation, to measure the satisfaction of an ex-ante performance variable, generated by a static allocation or a more general allocation policy (Read more).

"""
# %% Packages
from numpy import append, argsort, cumsum, diff, exp, log, sum, zeros
from scipy.stats import norm as normal
from scipy.integrate import quad
from pandas import DataFrame, read_csv, Series

# %% Load data
# Scenario Probabilities Forecast (Montecarlo checklist - Step 3)
db_scenario_probs = read_csv(r'C:\Projects\Portfolio_Management\examples\Checklist_MC\data/db_scenario_probs.csv')
p_scenario = db_scenario_probs['p_scenario'].values

# Ex-ante P&Ls of stocks, S&P 500, options and bonds at the horizon (Montecarlo checklist - Step 4)
db_pricing = read_csv(r'C:\Projects\Portfolio_Management\examples\Checklist_MC\data/db_pricing.csv')
pi_t_now_t_hor = db_pricing.values

# Portfolio Ex-Ante Performance (Montecarlo checklist - Step 5)
db_exante_perf = read_csv(r'C:\Projects\Portfolio_Management\examples\Checklist_MC\data/db_exante_perf.csv')
y_h = db_exante_perf.values.squeeze()

# portfolio holdings (Montecarlo checklist - Step 5)
db_holdings = read_csv(r'C:\Projects\Portfolio_Management\examples\Checklist_MC\data/db_holdings.csv')
h = db_holdings.values.squeeze()

# %% 1. Expected Utility of Exponential utility function and certainty-equivalent satisfaction measure 
############## input (you can change it) ##############
lam = 3e-8  # parameter of exponential utility function
#######################################################

exp_ut = p_scenario@(-exp(-lam*y_h))  # expected utility
print('exp_ut =', exp_ut.round(4))
ceq_pi = -(1/lam)*log(-exp_ut)  # certainty equivalent
print('ceq_pi =', ceq_pi.round())

# %% 2. Quantile (VaR) satisfaction measure 
######################## input (you can change it) ########################
c_quantile = 0.95  # confidence level for the quantile satisfaction measure
###########################################################################

y_h_sort = y_h[argsort(y_h)]  # sorted scenarios
p_sort = p_scenario[argsort(y_h)]  # sorted probabilities
u_sort = append(0, cumsum(p_sort))  # cumulative sums of sorted probabilities
w = diff(normal.cdf(u_sort, 1 - c_quantile, 0.25*(len(y_h)**-0.2)))  # weights per Gaussian Kernel Smoothing
w = w/sum(w)  # rescaled weights
q_pi = y_h_sort@w  # smooth quantile
print('q_pi =', q_pi.round())

# %% 3. Sub-quantile (negative cVaR) satisfaction measure 
############################ input (you can change it) ############################
c_subquantile = 0.95  # confidence level for the sub-quantile satisfaction measure
###################################################################################

# indicator function
def indicator(x):
    return (0 <= x and x <= 1 - c_subquantile)

# spectrum function
def spectr_q_(x):
    return (1/(1 - c_subquantile))*indicator(x)
'''
Soll wohl zeigen, dass CVaR eine Spezialform des Spectrum ist.
Brauchen tut man das eigentlich nicht
'''


# sub-quantile 
y = pi_t_now_t_hor@h  # ex-ante performance scenarios
y_sort = y[argsort(y)]  # sort ex-ante performance scenarios
p_sort = p_scenario[argsort(y)]  # sort probabilities
u_sort = append(0, cumsum(p_sort))  # cumulative sums of the sorted probabilities
# weights of spectral measure
w = zeros(pi_t_now_t_hor.shape[0])
for j in range(pi_t_now_t_hor.shape[0]):
    w[j], _ = quad(spectr_q_, u_sort[j], u_sort[j + 1])  # quad(func, a, b) Intergrate func from a to b
w = w/sum(w)  # weights
subq_pi = y_sort@w  # sub-quantile 
print('subq_pi =', subq_pi.round())


# %% 4. Performance expectation and negative variance satisfaction measures 
e_pi = p_scenario@y_h  # performance expectation
print('e_pi =', e_pi.round())

v_pi = ((y_h - e_pi).T*p_scenario)@(y_h - e_pi)  # variance 
neg_v_pi = -v_pi  # negative variance satisfaction measure
print('neg_v_pi =', neg_v_pi.round())

# %% Save data
# satisfaction measures
out = DataFrame({'ceq_pi': Series(ceq_pi), 'q_pi': Series(q_pi), 'subq_pi': Series(subq_pi),
                 'mean_pi': Series(e_pi), 'neg_var_pi': Series(neg_v_pi),
                 'c_subquantile': Series(c_subquantile), 'c_quantile': Series(c_quantile)})
out.to_csv(r'C:\Projects\Portfolio_Management\examples\Checklist_MC\data/db_quantile_and_satis.csv', index=False); del out;
